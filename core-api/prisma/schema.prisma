generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SingularValue {
  singular
}

enum NomenclatureVariant {
  lenses
  ready_glasses
}

model const_CompanyName {
  singular SingularValue @unique @default(singular)
  date     DateTime      @unique @default(now()) @updatedAt @db.Timestamptz(6)
  value    String?       @db.VarChar

  @@map("constant.company_name")
}

model const_Accountant {
  date       DateTime  @unique @default(now()) @db.Timestamptz(6)
  employeeId Int?
  value      Employee? @relation(fields: [employeeId], references: [id], onDelete: Restrict)

  @@map("constant.accountant")
}

model Color {
  id                     Int                      @id @default(autoincrement())
  value                  String                   @unique @db.VarChar
  NomenclatureAppearance NomenclatureAppearance[]

  @@map("list.colors")
}

model RimShape {
  id                    Int                     @id @default(autoincrement())
  value                 String                  @unique @db.VarChar
  NomenclatureRimParams NomenclatureRimParams[]

  @@map("list.rim_shapes")
}

model Diopter {
  id                      Int                    @id @default(autoincrement())
  value                   String                 @unique @db.VarChar
  variantsLensSph         Variant_Lens[]         @relation("variantsLensSph")
  variantsLensCyl         Variant_Lens[]         @relation("variantsLensCyl")
  variantsReadyGlassesSph Variant_ReadyGlasses[] @relation("variantsReadyGlassesSph")

  @@map("list.diopters")
}

model Position {
  id        Int        @id @default(autoincrement())
  value     String     @unique @db.VarChar
  Employees Employee[]

  @@map("list.positions")
}

model Employee {
  id               Int                @id @default(autoincrement())
  parentId         Int?               @map("parent_id")
  isFolder         Boolean            @default(false) @map("is_folder")
  name             String             @db.VarChar
  description      String?            @db.VarChar
  positionId       Int?
  createdAt        DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime           @default(now()) @map("updated_at") @db.Timestamptz(6)
  parent           Employee?          @relation("EmployeeRecursive", fields: [parentId], references: [id], onDelete: Restrict)
  children         Employee[]         @relation("EmployeeRecursive")
  const_Accountant const_Accountant[]
  purchaseInvoices PurchaseInvoice[]
  Positions        Position?          @relation(fields: [positionId], references: [id])

  @@map("catalog.employees")
}

model NomenclatureType {
  id            Int                  @id @default(autoincrement())
  name          String               @db.VarChar
  totals        Boolean              @default(true)
  variantsTable NomenclatureVariant? @map("variants_table")
  // variantsTable String?        @map("variants_table") @db.VarChar
  createdAt     DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime             @default(now()) @map("updated_at") @db.Timestamptz(6)
  // variantsLenses       Variant_Lenses[]
  // variantsReadyGlasses Variant_ReadyGlasses[]
  Nomenclature  Nomenclature[]

  @@map("catalog_types.nomenclatures")
}

model Variant_Lens {
  id       Int      @id @default(autoincrement())
  // nomenclatureTypeId Int?              @map("nomenclature_type_id")
  // nomenclatureType   NomenclatureType? @relation(fields: [nomenclatureTypeId], references: [id], onDelete: Restrict)
  name     String   @db.VarChar
  sph      Diopter? @relation("variantsLensSph", fields: [sphId], references: [id])
  sphId    Int?     @map("sph_id")
  cyl      Diopter? @relation("variantsLensCyl", fields: [cylId], references: [id])
  cylId    Int?     @map("cyl_id")
  diameter Int?
  tone     String?  @db.VarChar(2)

  @@map("variant.lenses")
}

model Variant_ReadyGlasses {
  id    Int      @id @default(autoincrement())
  // nomenclatureTypeId Int?              @map("nomenclature_type_id")
  // nomenclatureType   NomenclatureType? @relation(fields: [nomenclatureTypeId], references: [id], onDelete: Restrict)
  name  String   @db.VarChar
  sph   Diopter? @relation("variantsReadyGlassesSph", fields: [sphId], references: [id])
  sphId Int?     @map("sph_id")
  pd    Int?
  tone  String?  @db.VarChar(2)

  @@map("variant.ready_glasses")
}

model Partner {
  id               Int               @id @default(autoincrement())
  parentId         Int?              @map("parent_id")
  isFolder         Boolean           @default(false) @map("is_folder")
  name             String            @db.VarChar
  description      String?           @db.VarChar
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime          @default(now()) @map("updated_at") @db.Timestamptz(6)
  parent           Partner?          @relation("PartnerRecursive", fields: [parentId], references: [id], onDelete: Restrict)
  children         Partner[]         @relation("PartnerRecursive")
  purchaseInvoices PurchaseInvoice[]

  @@map("catalog.partners")
}

model Nomenclature {
  id                  Int                     @id @default(autoincrement())
  parentId            Int?                    @map("parent_id")
  isFolder            Boolean                 @default(false) @map("is_folder")
  typeId              Int?                    @map("type_id")
  name                String                  @db.VarChar
  description         String?                 @db.VarChar
  code                String?                 @db.VarChar
  createdAt           DateTime                @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime                @default(now()) @map("updated_at") @db.Timestamptz(6)
  parent              Nomenclature?           @relation("NomenclatureRecursive", fields: [parentId], references: [id], onDelete: Restrict)
  children            Nomenclature[]          @relation("NomenclatureRecursive")
  appearance          NomenclatureAppearance?
  rimParams           NomenclatureRimParams?
  lensParams          NomenclatureLensParams?
  purchaseInvoiceItem PurchaseInvoiceItem[]
  type                NomenclatureType?       @relation(fields: [typeId], references: [id])

  @@map("catalog.nomenclatures")
}

model NomenclatureAppearance {
  nomenclatureId Int          @unique @map("nomenclature_id")
  color          Color?       @relation(fields: [colorId], references: [id], onDelete: Restrict)
  colorId        Int?         @map("color_id")
  weight         Int?
  nomenclature   Nomenclature @relation(fields: [nomenclatureId], references: [id], onDelete: Cascade)

  @@map("catalog.nomenclatures.appearance")
}

model NomenclatureRimParams {
  nomenclatureId Int          @unique @map("nomenclature_id")
  bridge         Int?
  temple         Int?
  width          Int?
  height         Int?
  shape          RimShape?    @relation(fields: [shapeId], references: [id], onDelete: Restrict)
  shapeId        Int?         @map("shape_id")
  nomenclature   Nomenclature @relation(fields: [nomenclatureId], references: [id], onDelete: Cascade)

  @@map("catalog.nomenclatures.rim_params")
}

model NomenclatureLensParams {
  nomenclatureId Int          @unique @map("nomenclature_id")
  index          Float?
  diameter       Int?
  nomenclature   Nomenclature @relation(fields: [nomenclatureId], references: [id], onDelete: Cascade)

  @@map("catalog.nomenclatures.lens_params")
}

model Warehouse {
  id               Int               @id @default(autoincrement())
  parentId         Int?              @map("parent_id")
  isFolder         Boolean           @default(false) @map("is_folder")
  name             String            @db.VarChar
  description      String?           @db.VarChar
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime          @default(now()) @map("updated_at") @db.Timestamptz(6)
  parent           Warehouse?        @relation("WarehouseRecursive", fields: [parentId], references: [id], onDelete: Restrict)
  children         Warehouse[]       @relation("WarehouseRecursive")
  purchaseInvoices PurchaseInvoice[]

  @@map("catalog.warehouses")
}

model PurchaseInvoice {
  id          Int                   @id @default(autoincrement())
  date        DateTime              @default(now()) @map("date") @db.Timestamptz(6)
  num         String                @db.VarChar
  partnerId   Int                   @map("partner_id")
  partner     Partner               @relation(fields: [partnerId], references: [id], onDelete: Restrict)
  warehouseId Int                   @map("warehouse_id")
  warehouse   Warehouse             @relation(fields: [warehouseId], references: [id], onDelete: Restrict)
  createdAt   DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime              @default(now()) @map("updated_at") @db.Timestamptz(6)
  authorId    Int                   @map("author_id")
  author      Employee              @relation(fields: [authorId], references: [id], onDelete: Restrict)
  isPosted    Boolean               @default(false) @map("is_posted")
  items       PurchaseInvoiceItem[]

  @@map("document.purchase_invoices")
}

model PurchaseInvoiceItem {
  id             Int              @id @default(autoincrement())
  invoiceId      Int?             @map("invoice_id")
  invoice        PurchaseInvoice? @relation(fields: [invoiceId], references: [id], onDelete: Restrict)
  nomenclatureId Int?             @map("nomenclature_id")
  nomenclature   Nomenclature?    @relation(fields: [nomenclatureId], references: [id], onDelete: Restrict)
  variantId      Int?             @map("variant_id")
  quantity       Decimal          @default(0.000) @db.Decimal(12, 3)
  price          Decimal          @default(0.00) @db.Decimal(12, 2)
  createdAt      DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime         @default(now()) @map("updated_at") @db.Timestamptz(6)

  @@map("document.purchase_invoices.items")
}
