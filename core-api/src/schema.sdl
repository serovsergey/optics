# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Accountant {
  date: DateTime
  history: [AccountantHistory!]
  value: Employee
}

type AccountantHistory {
  date: DateTime
  value: Employee
}

type Appearance {
  color: Color
  nomenclatureId: Int!
  weight: Int
}

input AppearanceInput {
  colorId: Int
  weight: Int
}

type Color {
  id: Int!
  value: String!
}

type CompanyName {
  date: DateTime
  value: String
}

type Constants {
  accountant: Accountant
  companyName: CompanyName
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Diopter {
  id: Int!
  value: String!
}

type Employee {
  createdAt: DateTime!
  description: String
  id: Int!
  isFolder: Boolean!
  name: String!
  parentId: Int
  updatedAt: DateTime!
}

input EmployeeCreateInput {
  description: String
  isFolder: Boolean!
  name: String!
  parentId: Int
}

type EmployeeResult {
  childrenCount: Int!
  createdAt: DateTime!
  description: String
  id: Int!
  isFolder: Boolean!
  name: String!
  parentId: Int
  updatedAt: DateTime!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type LensParams {
  diameter: Int
  index: Float
  nomenclatureId: Int!
}

input LensParamsInput {
  diameter: Int
  index: Float
}

input ListOptions {
  orderBy: JSON
  skip: Float
  take: Float
  where: JSON
}

type Mutation {
  createColor(value: String!): Color!
  createDiopter(value: String!): Diopter!
  createEmployee(data: EmployeeCreateInput!): Employee!
  createNomenclature(data: NomenclatureCreateInput!): Nomenclature!
  createPartner(data: PartnerCreateInput!): Partner!
  createPosition(value: String!): Position!
  createRimShape(value: String!): RimShape!
  createWarehouse(data: WarehouseCreateInput!): Warehouse!
  deleteAccountantHistoryRecord(date: DateTime!): Boolean!
  deleteColor(id: Int!): Color!
  deleteColors(ids: [Int!]!): Int!
  deleteDiopter(id: Int!): Diopter!
  deleteDiopters(ids: [Int!]!): Int!
  deleteEmployee(id: Int!): Employee!
  deleteEmployees(ids: [Int!]!): Int!
  deletePartner(id: Int!): Partner!
  deletePartners(ids: [Int!]!): Int!
  deletePosition(id: Int!): Position!
  deletePositions(ids: [Int!]!): Int!
  deleteRimShape(id: Int!): RimShape!
  deleteRimShapes(ids: [Int!]!): Int!
  deleteWarehouse(id: Int!): Warehouse!
  deleteWarehouses(ids: [Int!]!): Int!
  setAccountant(date: DateTime, employeeId: Float!): AccountantHistory!
  setCompanyName(value: String!): CompanyName!
  updateColor(id: Int!, value: String!): Color!
  updateDiopter(id: Int!, value: String!): Diopter!
  updateEmployee(data: EmployeeCreateInput!, id: Int!): Employee!
  updatePartner(data: PartnerCreateInput!, id: Int!): Partner!
  updatePosition(id: Int!, value: String!): Position!
  updateRimShape(id: Int!, value: String!): RimShape!
  updateWarehouse(data: WarehouseCreateInput!, id: Int!): Warehouse!
}

type Nomenclature {
  appearance: Appearance
  createdAt: DateTime!
  description: String
  id: Int!
  isFolder: Boolean!
  lensParams: LensParams
  name: String!
  parentId: Int
  rimParams: RimParams
  updatedAt: DateTime!
}

input NomenclatureCreateInput {
  appearance: AppearanceInput
  description: String
  isFolder: Boolean!
  lensParams: LensParamsInput
  name: String!
  parentId: Int
  rimParams: RimParamsInput
}

type NomenclatureResult {
  appearance: Appearance
  childrenCount: Int!
  createdAt: DateTime!
  description: String
  id: Int!
  isFolder: Boolean!
  lensParams: LensParams
  name: String!
  parentId: Int
  rimParams: RimParams
  updatedAt: DateTime!
}

type Partner {
  createdAt: DateTime!
  description: String
  id: Int!
  isFolder: Boolean!
  name: String!
  parentId: Int
  updatedAt: DateTime!
}

input PartnerCreateInput {
  description: String
  isFolder: Boolean!
  name: String!
  parentId: Int
}

type PartnerResult {
  childrenCount: Int!
  createdAt: DateTime!
  description: String
  id: Int!
  isFolder: Boolean!
  name: String!
  parentId: Int
  updatedAt: DateTime!
}

type Position {
  id: Int!
  value: String!
}

type Query {
  color(id: Int!): Color
  colors: [Color!]!
  constants(date: DateTime): Constants
  diopter(id: Int!): Diopter
  diopters: [Diopter!]!
  employee(id: Int!): EmployeeResult
  employees(options: ListOptions, parentId: Int): [EmployeeResult!]!
  health: String!
  nomenclature(id: Int!): NomenclatureResult
  nomenclatures(options: ListOptions, parentId: Int): [NomenclatureResult!]!
  partner(id: Int!): PartnerResult
  partners(options: ListOptions, parentId: Int): [PartnerResult!]!
  position(id: Int!): Position
  positions: [Position!]!
  rimShape(id: Int!): RimShape
  rimShapes: [RimShape!]!
  warehouse(id: Int!): WarehouseResult
  warehouses(options: ListOptions, parentId: Int): [WarehouseResult!]!
}

type RimParams {
  bridge: Int
  height: Int
  nomenclatureId: Float!
  shape: RimShape
  temple: Int
  width: Int
}

input RimParamsInput {
  bridge: Int
  height: Int
  shapeId: Int
  temple: Int
  width: Int
}

type RimShape {
  id: Int!
  value: String!
}

type Warehouse {
  createdAt: DateTime!
  description: String
  id: Int!
  isFolder: Boolean!
  name: String!
  parentId: Int
  updatedAt: DateTime!
}

input WarehouseCreateInput {
  description: String
  isFolder: Boolean!
  name: String!
  parentId: Int
}

type WarehouseResult {
  childrenCount: Int!
  createdAt: DateTime!
  description: String
  id: Int!
  isFolder: Boolean!
  name: String!
  parentId: Int
  updatedAt: DateTime!
}